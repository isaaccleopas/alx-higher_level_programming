============================
doctest for 2-matrix_divided.py
============================
``matrix_divided()`` returns a new matrix with all elements scalar divided

testing function with scalar division with single digit div

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Checking for successful Tests

	>>> matrix_divided([[1,2,3], [4,5,6]], 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	
	>>> matrix_divided([[1,2,3], [4,5,6]], 33)
	[[0.03, 0.06, 0.09], [0.12, 0.15, 0.18]]
	
	>>> matrix_divided([[1,2,3], [4,5,6]], -3)
	[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]
	
	>>> matrix_divided([[-1,-2,-3], [-4,-5,-6]], -2)
	[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]
	
	>>> matrix_divided([[1.3,2.3,3.5], [4.3,5.3,6.2]], 1.2)
	[[1.08, 1.92, 2.92], [3.58, 4.42, 5.17]]
	
Checking for exception Errors

	>>> matrix_divided()
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
	
	>>> matrix_divided([["bar","foo","baz"], ["bar","baz","foo"]], 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	
	>>> matrix_divided({8,9,3}, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	
	>>> matrix_divided([None], 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
		
	>>> matrix_divided([[1,2,3], [4,5,6]], 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero
	
	>>> matrix_divided([[1,2,3], [4,5,6]], True)
	Traceback (most recent call last):
	...
	TypeError: div must be a number

